=encoding utf8

=head1 NAME

Quiq::Gd::Image - Schnittstelle zur GD Graphics Library

=head1 BASE CLASSES

=over 2

=item *

GD::Image

=item *

L<Quiq::Object|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Object.pod>

=back

=head1 SYNOPSIS

  use Quiq::Gd::Image;
  
  my $img = Quiq::Gd::Image->new(100,100);
  $img->background('#ffffff');
  print $img->jpg;

=head1 DESCRIPTION

Die Klasse ist eine Überdeckung der Klasse GD::Image. Sie
überschreibt existierende Methoden und ergänzt die Klasse um
weitere Methoden.  Die Klasse kann überall verwendet werden, wo
GD::Image verwendet wird.  Alle Methoden von GD::Image sind auch
auf Quiq::Gd::Image-Objekte anwendbar.

=head2 Vorteile

Die Klasse Quiq::Gd::Image bietet folgende Vorteile:

=over 2

=item *

Beliebig viele Farben, da alle Bilder per Default TrueColor sind.
Bei GD sind Bilder per Default pallette-basiert mit maximal
256 Farben.

=item *

Die Klasse verfügt mit der Methode string() über eine einheitliche
Schnittstelle zum Zeichnen von GD- und TrueType-Fonts, horizontal
und vertikal. Bei GD werden GD- und TrueType-Fonts uneinheitlich
behandelt.

=item *

Die Methoden der Klasse lösen im Fehlerfall eine Exception aus.

=back

=head2 Unterschiede zwischen Palette-basierten und TrueColor-Bildern

Bei TrueColor liefert die GD-Methode colorAllocate() - mehrfach
für denselben Farbwert aufgerufen - immer den gleichen
Farbindex. Bei einem Palette-Bild wird immer ein neuer Farbindex
geliefert, auch wenn der Farbwert gleich ist. Daher muss aus
portablitätsgründen die GD-Methode colorResolve() genutzt werden.
Diese Portabilität wird von der Methode L<color|"color() - Alloziere Farbe">() sichergestellt.

=head2 Portierung einer existierenden Anwendung

=over 4

=item 1.

Konstruktor-Aufruf ersetzen:

  $img = Quiq::Gd::Image->new($width,$height);

statt

  $img = GD::Image->new($width,$height);

=item 2.

Nach dem Konstruktor-Aufruf die Hintergrundfarbe setzen:

  $white = $img->background(255,255,255);

statt

  $white = $img->colorAllocate(255,255,255);

=item 3.

Anwendung testen. Sie sollte fehlerfrei laufen.

=back

=head2 Text in ein existierendes Bild schreiben

  use Quiq::Gd::Font;
  use Quiq::Gd::Image;
  use Quiq::Path;
  
  my $fnt = Quiq::Gd::Font->new('gdMediumBoldFont');
  my $img = Quiq::Gd::Image->new('bild.jpg');
  my $color = $img->color(255,0,0);
  $img->string($fnt,10,10,'TEST',$color);
  Quiq::Path->write('bild.jpg',$img->jpeg);

=head2 Hintergrund transparent machen

  my $img = Quiq::Gd::Image->new($width,$height);
  my $white = $img->background(255,255,255);
  $img->transparent($white);

=head1 METHODS

=head2 Konstruktor

=head3 new() - Instantiiere Bildobjekt

=head4 Synopsis

  $img = $class->new($file);
  $img = $class->new($data);
  $img = $class->new($width,$height);
  $img = $class->new($width,$height,$maxColors);

=head4 Returns

Bildobjekt

=head4 Description

Instantiiere ein Bildobjekt der Breite $width und der Höhe $height mit
einer maximalen Anzahl von $maxColors Farben und liefere eine
Referenz auf dieses Objekt zurück. Schlägt der Aufruf fehl, löse
eine Exception aus.

Ist $maxColors nicht angegeben oder $maxColors > 256, wird ein
TrueColor-Bild erzeugt, andernfalls ein palette-basiertes Bild
mit maximal 256 Farben.

Die Methode blesst das Objekt auf die Klasse $class, da die Methoden
newPalette() und newTrueColor() der Klasse GD::Image dies nicht tun!

Der Hintergrund eines TrueColor-Bildes ist schwarz. Eine andere
Hintergrundfarbe wird mit background() gesetzt. Anders als
bei einem palette-basierten Bild ist I<nicht> die erste allozierte
Farbe die Hintergrundfarbe!

=head4 See Also

Siehe "perldoc GD", Methoden newPalette(), newTrueColor().

=head2 Einfache Operationen

=head3 color() - Alloziere Farbe

=head4 Synopsis

  $color = $img->color;             # Default-Farbe
  $color = $img->color(undef);      # Default-Farbe
  $color = $img->color($n);         # Index, bereits allozierte GD-Farbe
  $color = $img->color($r,$g,$b);   # dezimal
  $color = $img->color(\@rgb);      # dezimal als Array-Referenz
  $color = $img->color('RRGGBB');   # hexadezimal
  $color = $img->color('#RRGGBB');  # hexadezimal

=head4 Aliases

=over 2

=item *

colorAllocate()

=item *

colorResolve()

=item *

colorFindAllocate()

=back

=head4 Returns

Farbe

=head4 Description

Alloziere Farbe in der Farbtabelle des Bildes und liefere den Index des
Eintrags zurück. Existiert die Farbe bereits, liefere den existierenden
Index.

=head4 See Also

"perldoc GD" Methode colorResolve()

=head3 background() - Alloziere Farbe und setze Hintergrund

=head4 Synopsis

  $color = $img->background(@color);

=head4 Returns

Farbe

=head4 Description

Alloziere Farbe @color, fülle das gesamte Bild mit der Farbe
und liefere den Farbindex zurück.

Zu den möglichen Angaben für @color siehe Methode $img->L<color|"color() - Alloziere Farbe">().

Der Hintergrund eines TrueColor-Bildes ist anfänglich schwarz.
Anders als bei einem Palette-basierten Bild wird I<nicht> die erste
allozierte Farbe automatisch die Hintergrundfarbe. Daher sollte die
erste Farbe mit dieser Methode alloziert werden, damit
gleichzeitig die Hintergrundfarbe gesetzt wird.

=head3 border() - Zeichne inneren Rahmen um das Bild

=head4 Synopsis

  $img->border($color);

=head4 Returns

Nichts

=head4 Description

Zeichne einen inneren Rahmen in Farbe $color um das Bild.
"Innerer Rahmen" bedeutet, dass der Rahmen Teil des Bildes ist
und nicht außen um das Bild herumgelegt ist.

=head3 string() - Zeichne Zeichenkette horizontal oder vertikal

=head4 Synopsis

  $img->string($font,$x,$y,$string,$color,@opt);

=head4 Options

=over 4

=item -up => $bool (Default: 0)

Schreibe den Text nicht horizontal sondern vertikal.

=back

=head4 Returns

Nichts

=head4 Description

Zeichne Zeichenkette $string an Position ($x,$y). Die Zeichenkette
kann mehrzeilig sein.

Der Font ist ein C<< Quiq::Gd::Font >>-Objekt. Diese Klasse
vereinheitlicht GD- und TrueType-Fonts. GD-Fonts können nicht
in beliebigem Winkel, sondern nur horizontal und vertikal geschrieben
werden, daher erlaubt die Methode nur diese beiden Ausrichtungen.

Die Position ($x,$y) ist in beiden Ausrichtungen die linke Ecke
oberhalb des ersten Zeichens.

  horizontal          vertikal
  
  ($x,$y)
     x---------+         +---+
     | ....... |         | . |
     +---------+         | . |
                         | . |
                         | . |
                         | . |
                 ($x,$y) x---+

=head3 stringUp() - Zeichne Zeichenkette vertikal

=head4 Synopsis

  $img->stringUp($font,$x,$y,$string,$color);

=head4 Returns

Nichts

=head4 Description

Die Methode ist die font-portable Überdeckung für die gleichnmige
Methode in der GD-Bibliothek.

=head3 stringCentered() - Zeichne Zeichenkette horizontal oder vertikal zentriert

=head4 Synopsis

  $img->stringCentered($font,$orientation,$x,$y,$string,$color);

=head3 rainbowColors() - Alloziere Regenbogenfarben-Palette

=head4 Synopsis

  @colors | $colorA = $img->rainbowColors($n);

=head4 Returns

Array von Farben

=head4 Description

Alloziere eine Palette von $n Regenbogenfarben (Blau nach Rot) und
liefere die Liste der Farbtabellen-Indizes zurück.

Werte für $n: 4, 8, 16, 32, 64, 128, 256, 512, 1024.

Die Regenbogenfarben können verwendet werden, um die Werte
eines Wertebereichs in einen Farbverlauf zu übersetzen.

  Farbe     % Wertebereich  R   G   B
  --------- -------------- --- --- ---
  Blau             0        0   0  255
                                |        G-Anteil nimmt zu
  Hellblau        25        0  255 255
                                    |    B-Anteil nimmt ab
  Gruen           50        0  255  0
                            |            R-Anteil nimmt zu
  Gelb            75       255 255  0
                                |        G-Anteil nimmt ab
  Rot            100       255  0   0

=head1 VERSION

1.172

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Gd/Image.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2020 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
