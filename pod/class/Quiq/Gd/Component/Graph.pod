=encoding utf8

=head1 NAME

Quiq::Gd::Component::Graph - Polyline-Graph

=head1 BASE CLASS

L<Quiq::Gd::Component|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Gd/Component.pod>

=head1 DESCRIPTION

Das Objekt repräsentiert einen Graph entlang der Weltkoordinaten @x und @y.
Per Default wird der Graph über der gesamten Fläche des Bildes gezeichnet.
Durch die Angabe C<< colors=>\@colors >> kann als dritte Dimension ein Farbwert
entlang des Graphen gezeichnet werden. Punkte und Linien werden in diesen
Farben gezeichnet, sofern per (C<pointColor>) oder (C<lineColor>) nichts
anderes vorgegeben ist.

=head1 ATTRIBUTES

Fett hervorgehobene Attribute sind Pflichtangaben beim Konstruktor-Aufruf.

=over 4

=item B<< width => $int >> (Default: keiner)

Breite der Grafik in Pixeln.

=item B<< height => $int >> (Default: keiner)

Höhe der Grafik in Pixeln.

=item x => \@x (Default: [])

Array der X-Werte (Weltkoordinate).

=item y => \@y (Default: [])

Array der Y-Werte (Weltkoordinate).

=item colors => \@colors (Default: undef)

Farben der Datenpunkte und Linien. Jeder Datenpunkt und jede
Verbindungslinie hat eine eigene Farbe. Siehe Beispiel
L<Graph mit verschiedenfarbigen Datenpunkten und Linien|"Graph mit verschiedenfarbigen Datenpunkten und Linien">.

=item lineColor => $color (Default: Defaultfarbe)

Farbe der Verbindungslinien. FIMXE: Verhältnis zu Attribut colors
beschreiben.

=item lineThickness => $n (Default: 1)

Dicke der Verbindungsline in Pixeln. Wenn 0, wird keine Linie gezeichnet.

=item xMin => $f (Default: Minimum der X-Werte)

Anfang des X-Wertebereichs (Weltkoodinate).

=item xMax => $f (Default: Maximum der X-Werte)

Ende des X-Wertebereichs (Weltkoodinate).

=item yMin => $f (Default: Minimum der Y-Werte)

Anfang des Y-Wertebereichs (Weltkoodinate).

=item yMax => $f (Default: Maximum der Y-Werte)

Ende des Y-Wertebereichs (Weltkoodinate).

=item xMaxDelta => $f (Default: undef)

Maximaler Abstand zwischen zwei benachbarten Punkten in X-Richtung.
Wird dieser Abstand überschritten, werden die Punkte nicht
durch eine Linie verbunden.

=item yMaxDelta => $f (Default: undef)

Wie C<xMaxDelta>, nur in Y-Richtung.

=item pointColor => $color (Default: Defaultfarbe)

Farbe, in der alle Datenpunkte gezeichnet werden.

=item pointSize => $n (Default: 1)

Größe des Punktes in Pixeln. Der Punkt wird gemäß C<pointStyle>
dargestellt. Der Wert sollte ungerade sein: 1, 3, 5, usw., damit
die Darstellung mittig über dem Datenpunkt stattfindet.

=item pointStyle => $style (Default: 'square')

Darstellung des Punktes: 'square', 'circle'.

=item adaptPlotRegion => $bool (Default: 0)

Ist die Punktgröße > 1 (s. Attribut C<pointSize>), erweitere den
Plotbereich (Attribute C<xMin>, C<xMax>, C<yMin>, C<yMax>) derart,
dass die Datenpunkte auch am Rand vollständig gezeichnet werden.

=back

=head1 EXAMPLES

=head2 Einfacher Graph

Code:

  require Quiq::Gd::Image;
  require Quiq::Gd::Component::Graph;
  
  my ($width,$height) = (500,100);
  
  $img = Quiq::Gd::Image->new($width,$height);
  $img->background('#ffffff');
  my $g = Quiq::Gd::Component::Graph->new(
      width=>$width,
      height=>$height,
      x=>[0, 1, 2,   3, 4,   5, 6, 7,   8,   9],
      y=>[0, 9, 7.5, 1, 1.9, 6, 4, 6.3, 0.5, 10],
  );
  $g->render($img);

Im Browser:

    [Nur im Browser sichtbar]

=head2 Graph mit gekennzeichneten Datenpunkten

Code:

  require Quiq::Gd::Image;
  require Quiq::Gd::Component::Graph;
  
  my ($width,$height) = (500,100);
  
  $img = Quiq::Gd::Image->new($width,$height);
  $img->background('#ffffff');
  $img->border('#d0d0d0');
  
  my $g = Quiq::Gd::Component::Graph->new(
      width=>$width,
      height=>$height,
      x=>[0, 1, 2,   3, 4,   5, 6, 7,   8,   9],
      y=>[0, 9, 7.5, 1, 1.9, 6, 4, 6.3, 0.5, 10],
      pointColor=>'#ff0000',
      pointSize=>5,
  );
  $g->render($img);

Im Browser:

    [Nur im Browser sichtbar]

Wir setzen die Punktfarbe und die Punktgröße. Die Endpunkte sind
abgeschnitten, da ein Teil von ihnen außerhalb des Bildes liegt.

=head2 Graph mit verschiedenfarbigen Datenpunkten und Linien

Code:

  require Quiq::Gd::Image;
  require Quiq::Gd::Component::Graph;
  
  my ($width,$height) = (504,104);
  
  $img = Quiq::Gd::Image->new($width,$height);
  $img->background('#ffffff');
  $img->border('#d0d0d0');
  
  my $g = Quiq::Gd::Component::Graph->new(
      width=>$width-4,
      height=>$height-4,
      x=>[0, 1, 2,   3, 4,   5, 6, 7,   8,   9],
      y=>[0, 9, 7.5, 1, 1.9, 6, 4, 6.3, 0.5, 10],
      colors=>[
          '#ff0000',
          '#00ff00',
          '#0000ff',
          '#ffff00',
          '#ff00ff',
          '#00ffff',
          '#000000',
          '#808000',
          '#800080',
          '#008080',
      ],
      pointSize=>5,
  );
  $g->render($img,2,2);

Im Browser:

    [Nur im Browser sichtbar]

Wenn Eigenschaft C<colors> definiert ist, werden die Punkte und
Verbindungslinien in den angegebenen Farben dargestellt.
Die Linie hat die Farbe des Anfangspunktes, der letzte Punkt
hat keine Verbindungsline. Mit C<pointColor> oder C<lineColor>
kann die Punkt- oder Linienfarbe auf eine bestimmte Farbe
festgelegt werden (beide im Falle von C<colors> fix
einzustellen, macht wenig Sinn, denn dann hat C<colors> keinen
Effekt mehr). Die Endpunkte sind hier im Gegensatz zum
vorigen Beispiel vollständig dargestellt, da wir das Bild um 4 Pixel
breiter und höher gemacht haben als den Plotbereich.

=head2 Größe Plotregion anpassen mit adaptPlotRegion

Code:

  require Quiq::Gd::Image;
  require Quiq::Gd::Component::Graph;
  
  my ($width,$height) = (504,104);
  
  $img = Quiq::Gd::Image->new($width,$height);
  $img->background('#ffffff');
  $img->border('#d0d0d0');
  
  my $g = Quiq::Gd::Component::Graph->new(
      width=>$width,
      height=>$height,
      pointSize=>5,
      adaptPlotRegion=>1,
      x=>[0, 1, 2,   3, 4,   5, 6, 7,   8,   9],
      y=>[0, 9, 7.5, 1, 1.9, 6, 4, 6.3, 0.5, 10],
      colors=>[
          '#ff0000',
          '#00ff00',
          '#0000ff',
          '#ffff00',
          '#ff00ff',
          '#00ffff',
          '#000000',
          '#808000',
          '#800080',
          '#008080',
      ],
  );
  $g->render($img);

Im Browser:

    [Nur im Browser sichtbar]

Mit C<adaptPlotRegion> wird der Plotbereich so verkleinert, dass
Punkte am Rand vollständig sichtbar sind.

=head1 METHODS

=head2 Konstruktor

=head3 new() - Konstruktor

=head4 Synopsis

  $g = $class->new(@keyVal);

=head4 Description

Instantiiere ein Grafik-Objekt mit den Eigenschaften @keyVal
(s. Abschnitt L<ATTRIBUTES|"ATTRIBUTES">) und liefere eine Referenz auf das Objekt
zurück.

=head2 Zeichnen

=head3 render() - Zeichne Grafik

=head4 Synopsis

  $g->render($img);
  $g->render($img,$x,$y,@keyVal);
  $class->render($img,$x,$y,@keyVal);

=head4 Description

Zeichne die Grafik in Bild $img an Position ($x,$y).
Die Methode liefert keinen Wert zurück.

=head2 Objektmethoden

=head3 xMin() - Minimum des X-Wertebereichs

=head4 Synopsis

  $xMin = $g->xMin;

=head4 Description

Liefere das Minimum des X-Wertebereichs, das entweder beim
Konstruktoraufruf gesetzt oder aus den Daten ermittelt wurde.

=head3 xMax() - Maximum des X-Wertebereichs

=head4 Synopsis

  $xMax = $g->xMax;

=head4 Description

Liefere das Maximum des X-Wertebereichs, das entweder beim
Konstruktoraufruf gesetzt oder aus den Daten ermittelt wurde.

=head3 yMin() - Minimum des X-Wertebereichs

=head4 Synopsis

  $yMin = $g->yMin;

=head4 Description

Liefere das Minimum des Y-Wertebereichs, das entweder beim
Konstruktoraufruf gesetzt oder aus den Daten ermittelt wurde.

=head3 yMax() - Maximum des Y-Wertebereichs

=head4 Synopsis

  $yMax = $g->yMax;

=head4 Description

Liefere das Maximum des Y-Wertebereichs, das entweder beim
Konstruktoraufruf gesetzt oder aus den Daten ermittelt wurde.

=head1 VERSION

1.229

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Gd/Component/Graph.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2025 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
