=encoding utf8

=head1 NAME

Quiq::Path - Dateisystem-Operationen

=head1 BASE CLASS

L<Quiq::Object|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Object.pod>

=head1 DESCRIPTION

Die Klasse definiert alle grundlegenden (link, mkdir, rename, symlink
usw.) und komplexen (copy, glob, find usw.) Dateisystem-Operationen.
Eine Dateisystem-Operation ist eine Operation auf einem I<Pfad>.

=head1 METHODS

=head2 Konstruktor

=head3 new() - Instantiiere Objekt

=head4 Synopsis

  $p = $class->new;

=head4 Returns

Path-Objekt

=head4 Description

Instantiiere ein Objekt der Klasse und liefere eine Referenz auf
dieses Objekt zurück. Da die Klasse ausschließlich Klassenmethoden
enthält, hat das Objekt ausschließlich die Funktion, eine abkürzende
Aufrufschreibweise zu ermöglichen.

=head2 Datei-Operationen

=head3 append() - Hänge Daten an Datei an

=head4 Synopsis

  $this->append($file,$data,@opt);

=head4 Arguments

=over 4

=item $file

Pfad der Datei.

=item $data

Daten, die auf die Datei geschrieben werden.

=back

=head4 Options

=over 4

=item -lock => $bool (Default: 0)

Locke die Datei während des Schreibens exklusiv.

=back

=head4 Description

Hänge Daten $data an Datei $file an.

=head3 checkFileSecurity() - Prüfe, ob Datei geschützt ist

=head4 Synopsis

  $this->checkFileSecurity($file); # nur Owner darf schreiben und lesen
  $this->checkFileSecurity($file,$readableByOthers); # nur Owner darf schreiben

=head4 Arguments

=over 4

=item $file

Datei, deren Rechte geprüft werden.

=item $readableByOthers

Wenn wahr, dürfen auch andere die Datei lesen.

=back

=head4 Description

Prüfe, ob die Datei $file vor unerlaubtem Zugriff geschützt ist.
Wenn nicht, wirf eine Exception.

Per Default darf die Datei nur für ihren Owner lesbar und schreibbar
sein, muss also die Zugriffsrechte rw------- besitzen.

Ist $readable wahr, darf die Datei von der Gruppe und anderen
gelesen werden, darf also die Zugriffsrechte rw-r--r-- besitzen.

=head3 compare() - Prüfe, ob Inhalt differiert

=head4 Synopsis

  $bool = $class->compare($file1,$file2);

=head4 Description

Prüfe, ob der Inhalt der Dateien $file1 und $file2 differiert.
Ist dies der Fall, liefere I<wahr>, andernfalls I<falsch>.

=head3 compareData() - Prüfe, ob Datei-Inhalt von Daten differiert

=head4 Synopsis

  $bool = $class->compareData($file,$data);

=head4 Alias

different()

=head4 Description

Prüfe, ob der Inhalt der Datei $file von $data differiert. Ist dies
der Fall, liefere I<wahr>, andernfalls I<falsch>. Die Datei $file muss
nicht existieren.

=head3 copy() - Kopiere Datei

=head4 Synopsis

  $class->copy($srcPath,$destPath,@opt);

=head4 Options

=over 4

=item -createDir => $bool (Default: 0)

Erzeuge Zielverzeichnis, falls es nicht existiert.

=item -move => $bool (Default: 0)

Lösche Quelldatei $srcPath nach dem Kopieren.

=item -overwrite => $bool (Default: 1)

Wenn gesetzt, wird die Zieldatei $destPath überschrieben, falls sie
existiert. Andernfalls wird eine Exception geworfen.

=item -preserve => $bool (Default: 0)

Behalte den Zeitpunkt der letzten Änderung bei.

=back

=head4 Description

Kopiere Datei $srcPath nach $destPath.

=head3 copyToDir() - Kopiere Datei in Verzeichnis

=head4 Synopsis

  $class->copyToDir($srcFile,$destDir,@opt);

=head4 Options

=over 4

=item -createDir => $bool (Default: 0)

Erzeuge Zielverzeichnis, falls es nicht existiert.

=item -move => $bool (Default: 0)

Lösche Quelldatei $srcPath nach dem Kopieren.

=item -overwrite => $bool (Default: 1)

Wenn gesetzt, wird die Zieldatei $destPath überschrieben, falls sie
existiert. Andernfalls wird eine Exception geworfen.

=item -preserve => $bool (Default: 0)

Behalte den Zeitpunkt der letzten Änderung bei.

=back

=head4 Description

Kopiere Datei $srcPath nach $destPath.

=head3 duplicate() - Kopiere, bewege, linke oder symlinke Datei

=head4 Synopsis

  $class->duplicate($method,$srcPath,$destPath,@opt);

=head4 Options

=over 4

=item -preserve => $bool (Default: 0)

Behalte den Zeitpunkt der letzten Änderung bei (nur bei 'copy'
relevant).

=back

=head4 Description

Mache Datei $srcPath nach Methode $method unter $destPath verfügbar.
Werte für $method:

  copy
  move -or- rename
  link
  symlink

=head3 edit() - Bearbeite Datei im Editor

=head4 Synopsis

  $changed = $this->edit($file,@opt);

=head4 Arguments

=over 4

=item $file

Datei, die bearbeitet werden soll.

=back

=head4 Returns

Boolschen Wert, der anzeigt, ob die Datei verändert wurde.

=head4 Description

Öffne Datei $file im Editor, so dass diese vom Benutzer bearbeitet werden
kann. Die Methode prüft nach Verlassen des Editors, ob die Datei geändert
wurde. Falls ja, wird der Benutzer gefragt, ob er die Änderungen
beibehalten möchte. Falls ja, liefert die Methode wahr, andernfalls
falsch.

=head3 encoding() - Liefere das Encoding der Datei

=head4 Synopsis

  $encoding = $class->encoding($path,$altEncoding);

=head4 Description

Analysiere Datei $path hinsichtlich ihres Character-Encodings
und liefere den Encoding-Bezeichner zurück. Unterschieden werden:

=over 2

=item *

ASCII

=item *

UTF-8

=item *

UTF-16/32 mit BOM

=back

und $altEncoding. Ist $altEncoding nicht angegeben, wird
'ISO-8859-1' angenommen.

Anmerkung: Die Datei wird zur Zeichensatz-Analyse vollständig eingelesen.
Bei großen Dateien kann dies ineffizient sein.

=head3 link() - Erzeuge (Hard)Link

=head4 Synopsis

  $this->link($path,$link);

=head4 Options

=over 4

=item -force => $bool (Default: 0)

Lösche die Datei $link, falls sie bereits existiert.

=back

=head4 Description

Erzeuge einen Hardlink $link auf Pfad $path.
Die Methode liefert keinen Wert zurück.

=head3 newlineStr() - Ermittele Zeilentrenner

=head4 Synopsis

  $nl = $class->newlineStr($file);

=head4 Description

Ermittele den physischen Zeilentrenner (CR, LF oder CRLF) der Datei
$file und liefere diesen zurück. Wird kein Zeilentrenner gefunden,
liefere undef.

=head4 Example

  local $/ = Quiq::Path->newlineStr($file);
  
  while (<$fh>) {
      chomp;
      # Zeile verarbeiten
  }

=head3 nextFile() - Generiere nächsten Dateinamen

=head4 Synopsis

  $file = $this->nextFile($name,$n,$ext);

=head4 Arguments

=over 4

=item $name

Grundname der Datei. Kann leer (Leerstring oder C<undef>) sein,
dann besteht der Dateiname nur aus aus der laufenden Nummer.

=item $n

Anzahl der Stellen der laufenden Nummer.

=item $ext

Extension der Datei. Kann leer (Leerstring oder C<undef>) sein.

=back

=head4 Description

Ermittele und liefere den nächsten Namen einer Datei. Der Dateiname
hat den Aufbau

  NAME-NNNN.EXT

Die laufende Nummer NNNN (deren Breite durch den zweiten Parameter
festgelegt) wird anhand der vorhandenen Dateien im Dateisystem
ermittelt und um 1 erhöht.

=head4 Example

Es liegt noch keine Datei vor:

  $file = Quiq::Path->nextFile('myfile',3,'log');
  =>
  myfile-001.log

Die Datei mit der höchsten Nummer ist myfile-031.log:

  $file = Quiq::Path->nextFile('myfile',3,'log');
  =>
  myfile-032.log

=head3 nextNumber() - Generiere nächste Dateinamen-Nummer

=head4 Synopsis

  $num = $this->nextNumber($dir,$width);

=head4 Arguments

=over 4

=item $dir

Verzeichnis mit nummierten Dateien.

=item $width

Anzahl der Stellen der Nummer.

=back

=head4 Returns

Nummer mit der angegebenen Anzahl Stellen, ggf. mit führenden 0en
aufgefüllt.

=head4 Description

Ermittele und liefere die nächste Nummer eines Verzeichnisses mit
nummerierten Dateien. Die Dateinamen haben einen beliebigen
Aufbau, müssen aber eine Nummer mit genau $width Stellen
besitzen. Die laufende Nummer NNNN (deren Breite durch den zweiten
Parameter festgelegt ist) wird anhand der vorhandenen Dateien
im Verzeichnis $dir ermittelt und um 1 erhöht.

=head4 Example

Es liegt noch keine Datei mit einer dreistelligen Nummer NNN vor:

  $num = Quiq::Path->nextNumber($dir,3);
  =>
  001

Die Datei mit der höchsten dreistelligen Nummer NNN enthält 031:

  $num = Quiq::Path->nextNumber($dir,3);
  =>
  032

=head3 read() - Lies Datei

=head4 Synopsis

  $data = $class->read($file,@opt);

=head4 Options

=over 4

=item -autoDecode => $bool (Default: 0)

Auto-Dekodiere die gelesenen Daten als Text und entscheide selbständig,
ob es sich um UTF-8 oder ISO-8859-1 Encoding handelt.

=item -decode => $encoding (Default: undef)

Decodiere die Datei gemäß dem Encoding $encoding.

=item -delete => $bool (Default: 0)

Lösche Datei nach dem Lesen.

=item -maxLines => $n (Default: 0)

Lies höchstens $n Zeilen. Die Zählung beginnt nach den
Skiplines (s. Option -skipLines). 0 bedeutet, lies alle Zeilen.

=item -skip => $regex (Default: keiner)

Überlies alle Zeilen, die das Muster $regex erfüllen. $regex
wird als Zeichenkette angegeben. Die Option kann beispielsweise dazu
verwendet werden, um Kommentarzeilen zu überlesen.

=item -skipLines => $n (Default: 0)

Überlies die ersten $n Zeilen.

=back

=head4 Description

Lies den Inhalt der Datei und liefere diesen zurück.

=head3 sha1() - SHA1 Hex Digest

=head4 Synopsis

  $this->sha1($file);

=head4 Arguments

=over 4

=item $file

Pfad der Datei.

=back

=head4 Description

Ermittele den SHA1 Hex Digest der Datei $file und liefere diesen zurück.

=head3 truncate() - Kürze Datei

=head4 Synopsis

  $this->truncate($file);

=head4 Arguments

=over 4

=item $file

Pfad der Datei.

=back

=head4 Description

Kürze Datei $file auf Länge 0, falls sie existiert. Existiert die
Datei nicht, geschieht nichts.

=head3 tempFile() - Erzeuge temporäre Datei

=head4 Synopsis

  $file = $this->tempFile(@opt);
  $file = $this->tempFile($data,@opt);

=head4 Arguments

Daten, die in die temporäre Datei geschrieben werden.

=head4 Options

Siehe Quiq::TempFile->new().

=head4 Returns

=over 4

=item $file

Tempdatei-Objekt

=back

=head4 Description

Erzeuge eine temporäre Datei, beschreibe sie mit den Daten $data und
liefere eine Referenz auf das Objekt zurück.

=head4 See Also

Quiq::TempFile

=head3 unindent() - Entferne Einrückung

=head4 Synopsis

  $this->unindent($file);

=head4 Arguments

=over 4

=item $file

Pfad der Datei.

=back

=head4 Description

Lies den Inhalt der Datei $file, entferne dessen Einrückung (per
Quiq::Unindent->hereDoc) und schreibe den uneingerückten Inhalt auf
die Datei zurück. Besitzt der Dateiinhalt keine Einrückung, findet keine
Änderung des Dateiinhalts statt.

=head3 write() - Schreibe Datei

=head4 Synopsis

  $class->write($file); # leere Datei
  $class->write($file,$data,@opt);
  $class->write($file,\$data,@opt);

=head4 Options

=over 4

=item -append => $bool (Default: 0)

Öffne die Datei im Append-Modus, d.h. hänge die Daten an die Datei an.

=item -encode => $encoding (Default: keiner)

Encodiere $data gemäß dem Encoding $encoding.

=item -lock => $bool (Default: 0)

Setze während des Schreibens einen Exclusive-Lock auf die Datei.
Dies kann im Falle von -append sinnvoll sein.

=item -mode => $mode (Default: keiner)

Setze die Permissions der Datei auf $mode. Beispiel: -mode=>0775

=item -recursive => $bool (Default: 1)

Erzeuge übergeordnete Verzeichnisse, wenn nötig.

=item -unindent => $bool (Default: 0)

Wende Quiq::Unindent->trimNl() auf die Daten $data an. Dies ist für
inline geschriebenen Text nützlich.

=back

=head3 writeIfDifferent() - Schreibe Datei, wenn Inhalt differiert

=head4 Synopsis

  $class->writeIfDifferent($file,$data);

=head3 writeInline() - Schreibe Inline-Daten in Datei

=head4 Synopsis

  $class->writeInline($file,<<'__EOT__',@opt);
  DATA
  ...
  __EOT__

=head2 Verzeichnis-Operationen

=head3 count() - Anzahl der Verzeichniseinträge

=head4 Synopsis

  $n = $this->count($dir);

=head4 Arguments

=over 4

=item $dir

Pfad des Verzeichnisses.

=back

=head4 Returns

Anzahl Verzeichniseinträge (Integer)

=head4 Description

Ermittele die Anzahl Einträge des Verzeichnisses $dir und liefere diese
zurück. Die Einträge C<.> und C<..> werden I<nicht> mitgezählt.

=head3 entries() - Liste der Verzeichniseinträge

=head4 Synopsis

  @paths | $pathA = $this->entries($dir,@opt);

=head4 Arguments

=over 4

=item $dir

Pfad des Verzeichnisses.

=back

=head4 Options

=over 4

=item -encoding => $charset (Default: 'utf-8')

Dekodiere die Verzeichniseinträge gemäß Zeichensatz $charset.

=back

=head4 Returns

Liste der Verzeichniseinträge (Array of Strings). Im Skalarkontext
eine Referenz auf die Liste.

=head4 Description

Ermittele die Einträge des Verzeichnisses $dir und liefere diese
als Liste zurück. Die Liste umfasst alle Verzeichniseinträge
außer "." und "..".

=head3 find() - Liefere Pfade innerhalb eines Verzeichnisses

=head4 Synopsis

  @paths|$pathA = $class->find($path,@opt);

=head4 Options

=over 4

=item -decode => $encoding

Dekodiere die Dateinamen gemäß dem angegebenen Encoding.

=item -exclude => $regex (Default: keiner)

Schließe alle Pfade aus, die Muster $regex erfüllen. Directories
werden gepruned, d.h. sie werden nicht durchsucht. Matcht ein Pfad
die Pattern sowohl von -pattern als auch -exclude, hat der
exclude-Pattern Vorrang, d.h. die Datei wird ausgeschlossen.

=item -follow => $bool (Default: 1)

Folge Symbolic Links.

=item -leavesOnly => $bool (Default: 0)

Liefere nur Pfade, die kein Anfang eines anderen Pfads sind.
Anwendungsfall: nur die Blatt-Verzeichnisse eines Verzeichnisbaums.

=item -olderThan => $seconds (Default: 0)

Liefere nur Dateien, die vor mindestens $seconds zuletzt geändert
wurden. Diese Option ist z.B. nützlich, um veraltete temporäre Dateien
zu finden, um sie zu löschen.

=item -outHandle => $fh (Default: \*STDOUT)

Filehandle, auf die Ausgabe im Falle von -verbose=>1 geschrieben
werden.

=item -pattern => $regex (Default: keiner)

Schränke die Treffer auf jene Pfade ein, die Muster $regex
erfüllen.  Matcht ein Pfad die Pattern sowohl von -pattern als
auch -exclude, hat der exclude-Pattern Vorrang, d.h. die Datei
wird ausgeschlossen.

=item -slash => $bool (Default: 0)

Füge einen Slash (/) am Ende von Directory-Namen hinzu.

=item -sloppy => $bool (Default: 0)

Wirf keine Exception, wenn $path nicht existiert, sondern liefere
undef bzw. eine leere Liste.

=item -subPath => $bool (Default: 0)

Liefere nur den Subpfad, entferne also $path am Anfang.

=item -testSub => sub {} (Default: undef)

Subroutine, die den Pfad als Argument erthält und einen boolschen
Wert liefert, der angibt, ob der Pfad zur Ergebnismenge gehört
oder nicht.

=item -type => 'd' | 'f' | undef (Default: undef)

Liefere nur Verzeichnisse ('d') oder nur, was kein Verzeichnis ist ('f'),
oder liefere alles (undef).

=item -verbose => $bool (Default: 0)

Schreibe Meldungen auf Ausgabe-Handle (s. Option -outHandle).

=back

=head4 Description

Finde alle Dateien und Verzeichnisse unterhalb von und einschließlich
Verzeichnis $path und liefere die Liste der gefundenen Pfade
zurück. Im Skalarkontext liefere eine Referenz auf die Liste.

Ist $dir Null (Leerstring oder undef), wird das aktuelle Verzeichnis
('.') durchsucht.

Die Reihenfolge der Dateien ist undefiniert.

=head3 findProgram() - Ermittele Pfad zu Programm

=head4 Synopsis

  $path = $class->findProgram($program);
  $path = $class->findProgram($program,$sloppy);

=head4 Arguments

=over 4

=item $program

Name des Programms.

=item $sloppy

Wenn wahr, wird keine Exception geworfen, wenn das Programm nicht
gefunden wird, sondern undef zurück geliefert.

=back

=head4 Returns

Programmpfad (String)

=head4 Description

Suche Programm $program über den Suchpfad der Shell und liefere
den vollständigen Pfad zurück. Wird das Programm nicht gefunden,
wird eine Exception geworfen, sofern $sloppy nicht wahr ist.

=head3 maxFilename() - Liefere den lexikalisch größten Dateinamen

=head4 Synopsis

  $max = $class->maxFilename($dir);

=head4 Description

Liefere den lexikalisch größten Dateinamen aus Verzeichnis $dir.

=head3 maxFileNumber() - Liefere den numerisch größten Dateinamen

=head4 Synopsis

  $max = $class->maxFileNumber($dir,@opt);

=head4 Options

=over 4

=item -sloppy => $bool (Default: 0)

Wirf keine Exception, wenn ein Dateiname nicht mit einer Nummer
beginnt.

=back

=head4 Description

Liefere den numerisch größten Dateinamen aus Verzeichnis $dir.
Die Methode ist nützlich, wenn die Dateinamen mit einer Zahl
NNNNNN beginnen und man die Datei mit der größten Zahl ermitteln
möchte um einer neu erzeugten Datei die nächsthöhere Nummer
zuzuweisen.

=head3 mkdir() - Erzeuge Verzeichnis

=head4 Synopsis

  $class->mkdir($dir,@opt);

=head4 Options

=over 4

=item -createParent => $bool (Default: 0)

Erzeuge nicht den angegebenen Pfad, sondern den Parent-Pfad.
Dies ist nützlich, wenn der übergebene Pfad ein Dateiname ist,
dessen Verzeichnis bei Nicht-Existenz erzeugt werden soll.
Impliziert -recursive=>1, wenn nicht explizit -recursive=>0
gesetzt ist.

=item -forceMode => $mode (Default: keiner)

Setze Verzeichnisrechte auf $mode ohne Berücksichtigung
der umask des Prozesses.

=item -mode => $mode (Default: 0775)

Setze Verzeichnisrechte auf $mode mit Berücksichtigung
der umask des Prozesses.

=item -mustNotExist => $bool (Default: 0)

Das Verzeichnis darf nicht existieren. Wenn es existiert, wird
eine Exception geworfen.

=item -recursive => 0 | 1 (Default: 0)

Erzeuge übergeordnete Verzeichnisse, wenn nötig.

=back

=head4 Description

Erzeuge Verzeichnis. Existiert das Verzeichnis bereits, hat
der Aufruf keinen Effekt. Kann das Verzeichnis nicht angelegt
werden, wird eine Exception ausgelöst.

=head3 mtimeDir() - Jüngste Modifikationszeit

=head4 Synopsis

  $mtime = $this->mtimeDir($dir);

=head4 Arguments

=over 4

=item $dir

Pfad des Verzeichnisses.

=back

=head4 Returns

Zeit in Unix Epoch (Integer)

=head4 Description

Ermittele über allen Pfaden in und einschließlch $dir den jüngsten
Modifikationszeitpunkt (mtime) und liefere diesen zurück.

=head3 rmdir() - Lösche Verzeichnis

=head4 Synopsis

  $class->rmdir($dir);

=head4 Arguments

=over 4

=item $dir

Pfad des Verzeichnisses

=back

=head4 Returns

nichts

=head4 Description

Lösche Verzeichnis $dir, falls dieses leer ist. Kann das
Verzeichnis nicht gelöscht werden, wird eine Exception ausgelöst.

=head3 tempDir() - Erzeuge temporäres Verzeichnis

=head4 Synopsis

  $dir = $this->tempDir(@opt);

=head4 Options

I<< siehe Quiq::TempDir >>

=head4 Returns

=over 4

=item $dir

Tempdir-Objekt

=back

=head4 Description

Erzeuge ein temporäres Verzeichnis und liefere eine Referenz auf
das Objekt zurück.

=head4 See Also

Quiq::TempDir

=head2 Pfad-Operationen

=head3 absolute() - Expandiere Pfad zu absolutem Pfad

=head4 Synopsis

  $absolutePath = $class->absolute($path);

=head4 Alias

realPath()

=head4 Description

Ist $path ein relativer Pfad, expandiere ihn zu einem absolutem Pfad
und liefere diesen zurück. Ist $path bereits absolut, liefere ihn
unverändert.

=head3 age() - Alter der letzten Modifikation

=head4 Synopsis

  $duration = $this->age($path);

=head4 Arguments

=over 4

=item $path

Pfad.

=back

=head4 Returns

Anzahl Sekunden (Integer)

=head4 Description

Ermittele das Alter der letzten Modifiktion des Pfad-Objekts in
Sekunden und liefere diesen Wert zurück. Existiert der Pfad nicht,
wird eine Exception geworfen.

=head3 basename() - Grundname eines Pfads

=head4 Synopsis

  $basename = $class->basename($path,@opt);

=head4 Alias

baseName()

=head4 Options

=over 4

=item -all => $bool (Default: 0)

Entferne alle, nicht nur die erste Extension.

=back

=head4 Description

Liefere den Grundnamen des Pfads, d.h. ohne Pfadanfang und Extension.

=head3 basePath() - Pfad ohne Extension

=head4 Synopsis

  $basePath = $class->basePath($path);

=head4 Description

Entferne eine etwaig vorhandene Extension von $path und liefere das
Resultat zurück.

=head3 chmod() - Setze Zugriffsrechte

=head4 Synopsis

  $class->chmod($path,$mode);

=head4 Description

Setze Zugriffsrechte $mode auf Pfad $path.

=head3 delete() - Lösche Pfad (rekursiv)

=head4 Synopsis

  $class->delete($path);

=head4 Description

Lösche den Pfad aus dem Dateisystem, also entweder die Datei oder
das Verzeichnis einschließlich Inhalt. Es ist kein Fehler, wenn
der Pfad im Dateisystem nicht existiert. Existiert der Pfad und
kann nicht gelöscht werden, wird eine Exception ausgelöst.
Die Methode liefert keinen Wert zurück.

=head3 dir() - Pfad ohne letzten Bestandteil

=head4 Synopsis

  $dir = $class->dir($path);

=head4 Returns

String

=head4 Description

Entferne den letzten Pfadbestandteil von $path und liefere
den Rest zurück. Enthält $path keinen Slash (/), wird ein Leerstring
geliefert.

=head3 exists() - Prüfe Existenz

=head4 Synopsis

  $bool = $this->exists($path);

=head4 Description

Prüfe, ob Pfad $path existiert und liefere den entsprechenden
Wahrheitswert zurück. Die Methode expandiert ~ am Pfadanfang.

=head3 expandTilde() - Expandiere Tilde

=head4 Synopsis

  $path = $class->expandTilde($path);

=head4 Returns

Pfad (String)

=head4 Description

Ersetze eine Tilde am Pfadanfang durch das Home-Verzeichnis des
Benutzers und liefere den resultierenden Pfad zurück.

=head3 extension() - Extension des Pfads

=head4 Synopsis

  $ext = $class->extension($path);

=head4 Description

Ermittele die Extension des Pfads $path und liefere diese zurück.
Besitzt der Pfad keine Extension, liefere einen Leerstring ('').

=head3 filename() - Letzte Pfadkomponente

=head4 Synopsis

  $filename = $class->filename($path);

=head4 Description

Liefere die letzte Komponente des Pfads.

=head3 glob() - Liefere Pfade, die Shell-Pattern erfüllen

=head4 Synopsis

  $path = $this->glob($pat);
  @paths = $this->glob($pat);

=head4 Description

Liefere die Pfad-Objekte, die Shell-Pattern $pat erfüllen.
Im Skalarkontext liefere den ersten Pfad, der dann
der einzig erfüllbare Pfad sein muss, sonst wird eine Exception
geworfen.

=head3 isEmpty() - Prüfe, ob Datei oder Verzeichnis leer ist

=head4 Synopsis

  $bool = $class->isEmpty($path);

=head3 mode() - Liefere Zugriffsrechte

=head4 Synopsis

  $mode = $this->mode($path);

=head4 Description

Liefere die Zugriffsrechte des Pfads $path.

=head4 Examples

=over 2

=item *

Permissions oktal anzeigen

  printf "%04o\n",Quiq::Path->mode('/etc/passwd');
  0644

=item *

Prüfen, ob eine Datei für andere lesbar oder schreibbar ist

  if ($mode & 00066) {
      die "ERROR: File ist readable or writable for others\n";
  }

=back

=head3 mtime() - Setze/Liefere Modifikationszeit

=head4 Synopsis

  $mtime = $class->mtime($path);
  $mtime = $class->mtime($path,$mtime);

=head4 Description

Liefere die Zeit der letzten Modifikation des Pfads $path. Wenn der
Pfad nicht existiert, liefere 0.

Ist ein zweiter Parameter $mtime angegeben, setze die Zeit auf den
angegebenen Wert. In dem Fall muss der Pfad existieren.

=head3 mtimePaths() - Setze mtime inkrementierend

=head4 Synopsis

  $this->mtimePaths(\@paths,$startTime,$step);

=head4 Arguments

=over 4

=item @path

Die Pfade, die zu nummerieren sind.

=item $startTime

Startzeitpunkt im Format "YYYY-MM-DD HH:MM:SS".

=item $step

Schrittweite in Sekunden.

=back

=head4 Example

  $ perl -MQuiq::Path -E '$p = Quiq::Path->new; $p->mtimePaths([$p->glob("*.jpg")],"2019-10-08 20:00:00",60)'

=head3 newer() - Vergleiche Modifikationsdatum zweier Pfade

=head4 Synopsis

  $bool = $class->newer($path1,$path2);

=head4 Description

Prüfe, ob Pfad $path1 ein jüngeres Modifikationsdatum besitzt als
$path2. Ist dies der Fall, liefere 1, andernfalls 0. Liefere
ebenfalls 1, wenn Datei $path2 nicht existiert. Pfad
$path1 muss existieren.

Pfad $path2 kann eine Zeichenkette oder ein Pfad-Objekt sein.

Dieser Test ist nützlich, wenn $path2 aus $path1 erzeugt wird
und geprüft werden soll, ob eine Neuerzeugung notwendig ist.

=head3 newExtension() - Setze eine neue Extension

=head4 Synopsis

  $newPath = $this->newExtension($path,$ext);

=head4 Description

Entferne die bestehende Extension von Pfad $path und füge $ext als
neue Extension hinzu. Besitzt $path keine Extension, wird
$ext hinzugefügt. Etension $ext kann mit oder ohne Punkt am Anfang
angegeben werden.

=head3 readlink() - Liefere Ziel des Symlink

=head4 Synopsis

  $path = $class->readlink($symlinkPath);

=head4 Alias

readLink()

=head4 Description

Liefere den Pfad, auf den der Symlink $symlinkPath zeigt.

=head3 removeExtension() - Entferne Extension

=head4 Synopsis

  $newPath = $class->removeExtension($path);

=head4 Description

Entferne die Extension von Pfad $path und liefere den
resultierenden Pfad zurück. Besitzt $path keine Extension, sind
$path und $newPath identisch.

=head3 rename() - Benenne Pfad um

=head4 Synopsis

  $this->rename($oldPath,$newPath,@opt);

=head4 Options

=over 4

=item -overwrite => $bool (Default: 1)

Wenn gesetzt, wird die Datei $newPath überschrieben, falls sie
existiert. Wenn nicht gesetzt, wird eine Exception geworfen,
falls sie existiert.

=item -recursive => 0 | 1 (Default: 0)

Erzeuge nicht-existente Verzeichnisse des Zielpfads
und entferne leere Verzeichnisse des Quellpfads.

=back

=head4 Description

Benenne Pfad $oldPath in $newPath um. Die Methode liefert keinen
Wert zurück.

=head4 Example

Zielpfad erzeugen, Quellpfad entfernen mit -recursive=>1.
Ausgangslage: Unterhalb von /tmp existieren weder a noch x.

  my $srcPath = '/tmp/a/b/c/d/f';
  my $destPath = '/tmp/x/b/c/d/f';
  Quiq::Path->write($srcPath,'',-recursive=>1);
  Quiq::Path->rename($srcPath,$destPath,-recursive=>1);

Nach Ausführung existiert der der Pfad /tmp/x/b/c/d/f, aber der Pfad
/tmp/a nicht mehr.

=head3 numberBasePaths() - Nummeriere die Basisnamen der Pfade

=head4 Synopsis

  $this->numberBasePaths(\@paths,$width,$step,@opts);

=head4 Arguments

=over 4

=item @path

Die Menge der Pfade.

=item $width

Die Breite (Anzahl der Stellen) der Nummer.

=item $step

Die Schrittweite der Nummerierung.

=back

=head4 Description

Sortiere die Basisnamen der Pfade B<@paths> lexikalisch und
nummeriere ihre Basisnamen durch, beginnend mit Nummer B<$step> und
Schrittweite B<$step>. Pfade mit dem gleichen Basisnamen aber
unterschiedlichen Extensions erhalten die gleiche Nummer, behalten
aber ihre unterschiedliche Extension.

=head4 Example

  $ ls
  a.jpg
  a.xcf
  x.jpg
  
  $ perl -MQuiq::Path -E 'Quiq::Path->numberBasePaths([$p->glob("*")],5,10)'
  
  $ ls
  00010.jpg
  00010.xcf
  00020.jpg

=head3 numberPaths() - Nummeriere Pfade

=head4 Synopsis

  $this->numberPaths(\@paths,$width,$step,@opts);

=head4 Arguments

=over 4

=item @path

Die Pfade, die zu nummerieren sind.

=item $width

Die Breite (Anzahl der Stellen) der Nummer.

=item $step

Die Schrittweite der Nummerierung.

=back

=head4 Options

=over 4

=item -move => [$after,$from,$to]

Ordne alle Pfade von $from bis $to (lexikalisch sortiert) nach der
Datei $after ein. Ist $after leer (Leerstring oder undef), werden
die Pfade an den Anfang gestellt. Alle Angaben I<vor> der
(Re-)Nummerierung.

=item -start => $n (Default: $step)

Verwende $n als Startwert.

=back

=head4 Description

Nummeriere die Pfade @paths, gemäß ihrer gegebenen Reihenfolge.
Der Basisname der jeweiligen Datei/des Directory aus @paths wird
hierbei durch eine Nummer der Breite $width ersetzt. Die Extension
(sofern vorhanden) bleibt erhalten. Die Nummerierung erfolgt mit
Schrittweite $width.

=head4 Example

Der Aufruf

  $ perl -MQuiq::Path -E '$p = Quiq::Path->new; $p->numberPaths([$p->glob("*")],5,10)'

benennt alle Dateien, gleichgültig wie sie heißen, im aktuellen
Verzeichnis um in

  00010.EXT
  00020.EXT
  00030.EXT
  ...

wobei EXT die Extension ist, die die Datei vorher hatte, d.h. diese
bleibt als einziges vom ursprünglichen Dateinamen erhalten.

=head3 split() - Zerlege Pfad in seine Komponenten

=head4 Synopsis

  ($dir,$file,$base,$ext) = $class->split($path);

=head4 Description

Zerlege Pfad in die vier Komponenten Verzeichnisname, Dateiname,
Basisname (= Dateiname ohne Extension) und Extension und liefere diese
zurück.

Für eine Komponente, die nicht existiert, wird ein Leerstring
geliefert.

=head3 stat() - Statusinformation eines Pfads

=head4 Synopsis

  @arr = $class->%METHOD($path);

=head4 Arguments

=over 4

=item $path

Datei- oder Verzeichnispfad.

=back

=head4 Returns

Statusinformation (List)

=head4 Description

Ermittele die Statusinformation eines Pfads und liefere diese
Information als 13-elementige Liste zurück.

Der Aufruf ist äquivalent zu

  stat $path

mit dem Unterschied, dass

=over 2

=item *

eine Tilde-Expansion stattfindet

=item *

eine Exception geworfen, wird, wenn $path nicht existiert

=back

=head4 See Also

=over 2

=item *

perldoc -f stat

=back

=head3 symlink() - Erzeuge Symlink

=head4 Synopsis

  $class->symlink($path,$symlink);

=head4 Description

Erzeuge Symlink $symlink für Pfad $path.
Die Methode liefert keinen Wert zurück.

=head3 symlinkRelative() - Erzeuge Symlink mit relativem Zielpfad

=head4 Synopsis

  $class->symlinkRelative($path,$symlink,@opt);

=head4 Options

=over 4

=item -createDir => $bool (Default: 0)

Erzeuge nicht-existente Verzeichnisse des Zielpfads.

=item -dryRun => $bool (Default: 0)

Führe das Kommando nicht aus. Speziell Verbindung mit
-verbose=>1 sinnvoll, um Code zu testen.

=item -verbose => $bool (Default: 0)

Gib Informationen über die erzeugten Symlinks auf STDOUT aus.

=back

=head4 Description

Erzeuge einen Symlink $symlink, der auf den Pfad $path verweist.
Die Methode liefert keinen Wert zurück.

Die Methode zeichnet sich gegenüber der Methode symlink() dadurch
aus, dass sie, wenn $path ein relativer Pfad ist, diesen so korrigiert,
dass er von $symlink aus korrekt ist. Denn der Pfad $path múss als
relativer Pfad als Fortsetzung von $symlink gesehen werden.

=head4 Example

  Quiq::Path->symlinkRelative('a','x')
  # x => a
  
  Quiq::Path->symlinkRelative('a/b','x')
  # x => a/b
  
  Quiq::Path->symlinkRelative('a/b','x/y')
  # x/y => ../a/b
  
  Quiq::Path->symlinkRelative('a/b','x/y/z')
  # x/y/z => ../../a/b

=head3 touch() - Setze Modifikationszeit auf aktuellen Zeitpunkt

=head4 Synopsis

  $mtime = $this->mtime($path);

=head4 Arguments

=over 4

=item $path

Pfad der Datei oder des Verzeichnisses, dessen mtime gesetzt werden soll.

=back

=head4 Returns

Modifikationszeit in Unix Epoch (Integer)

=head4 Description

Setze den Zeitpunkt der letzten Modifikation (mtime) des Pfades $path
auf den aktuellen Zeitpunkt.

=head3 uid() - UID des Owners der Datei

=head4 Synopsis

  $uid = $this->%METHOD($path);

=head4 Description

Ermittele die UID des Owners der Datei und liefere diese zurück.

=head1 VERSION

1.193

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Path.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2021 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
