=encoding utf8

=head1 NAME

Quiq::Database::Row::Object - Datensatz als Objekt

=head1 BASE CLASS

L<Quiq::Database::Row|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Database/Row.pod>

=head1 DESCRIPTION

Ein Objekt der Klasse repräsentiert einen Datensatz.

=head1 METHODS

=head2 Konstructor

=head3 new() - Konstruktor

=head4 Synopsis

  $row = $class->new($db,@keyVal); # [1]
  $row = $class->new(\@titles,\@values,@keyVal); # [2]
  $row = $class->new(\@titles,@keyVal); # [3]
  $row = $class->new(@keyVal); # [4]

=head4 Description

Instantiiere ein Datensatz-Objekt mit den Kolumnen @titles und
den Kolumnenwerten @values und liefere eine Referenz auf
dieses Objekt zurück.

=head2 Attributmethoden

=head3 exists() - Prüfe, ob Datensatz-Attribut existiert

=head4 Synopsis

  $bool = $row->exists($key);

=head4 Description

Liefere "wahr", wenn Datensatz-Attribut $key existiert,
anderfalls "falsch".

=head3 get() - Liefere Datensatz-Attributwerte

=head4 Synopsis

  $val = $row->get($key);
  @vals = $row->get(@keys);

=head4 Description

Liefere die Datensatz-Attributwerte zu den angegebenen
Schlüsseln. In skalarem Kontext liefere keine Liste, sondern den
Wert des ersten Schlüssels.

Ein Datensatz-Wert kann der Wert einer Kolumne oder das Ergebnis
einer Berechnung sein.

=head3 try() - Liefere Wert oder undef

=head4 Synopsis

  $val = $row->try($key);

=head4 Description

Liefere den Wert des Attributs I<$key>, falls es existiert,
sonst C<undef>.

=head3 set() - Setze Datensatz-Attribute

=head4 Synopsis

  $row->set(@keyVal);

=head4 Description

Setze die angegebenen Datensatz-Attribute. Es wird eine Exception
ausgelöst, wenn ein Attribut zu setzen versucht wird, das nicht existiert.
Die Methode liefert keinen Wert zurück.

=head3 init() - Initialisieren Datensatz-Attribute aus Objekt

=head4 Synopsis

  $row->init($obj);

=head4 Description

Setze die Datensatz-Komunen in $row auf die Werte der Attribute in $obj.
Eine Kolumne wird nur gesetzt, wenn $obj für sie einen Wert hat,
d.h. das Attribut muss existieren und es muss einen von '' und
undef verschiedenen Wert haben.

Die Methode liefert keinen Wert zurück.

=head3 initFromCgi() - Initialisieren Datensatz-Attribute aus CGI-Objekt

=head4 Synopsis

  $row->initFromCgi($cgi);

=head4 Description

Wie init(), nur dass ein CGI-Objekt per Methode param() befragt wird.

=head3 addAttribute() - Füge Datensatz-Attribute hinzu

=head4 Synopsis

  $row->addAttribute(@keys);

=head4 Description

Füge die Attribute @keys zum Datensatz hinzu, sofern noch nicht existent.
Die Methode liefert keinen Wert zurück.

=head3 removeColumn() - Entferne Datensatz-Kolumne(n)

=head4 Synopsis

  $row->removeColumn(@keys);

=head4 Description

Entferne die Kolumnen @keys aus dem Datensatz. Die Methode liefert
keinen Wert zurück.

=head3 add() - Setze Datensatz-Attribute forciert

=head4 Synopsis

  $row->add(@keyVal);

=head4 Alias

setValue()

=head4 Description

Forciere das Setzen der Datensatz-Attribute @keyVal, d.h. erzeuge
ein Datensatz-Attribut, falls es nicht existiert.
Die Methode liefert keinen Wert zurück.

=head3 memoize() - Füge Datensatz-Attribute mit berechnetem Wert hinzu

=head4 Synopsis

  $val = $row->memoize($key,$sub);

=head4 Description

Existiert das Datensatz-Attribut $key, liefere seinen Wert.
Andernfalls berechne dessen Wert mittels der anonymen Subroutine $sub
und speichere ihn auf dem Attribut.

=head3 getSet() - Methode zum Liefern/Setzen eines einzelnen Datensatz-Attributs

=head4 Synopsis

  $val = $row->getSet($key);
  $val = $row->getSet($key,$val);

=head4 Examples

=over 2

=item *

Implementierung einer einfachen Attributmethode

Dies setzt voraus, dass das Attribut vorhanden ist. Falls dies
nicht der Fall ist, kann es mit $row->add(xxx=>$val) eingeführt
werden. Diese Form der Attributmethode wird von selbst per
AUTOLOAD erzeugt, braucht also nicht implementiert werden

  sub xxx {
      return shift->getSet(xxx=>@_);
  }

=item *

Eine Attributmethode, die eine Liste oder eine Arrayreferenz liefert

  sub xxx {
      my $self = shift;
      # @_: $arr
      my $arr = $self->getSet(xxx=>@_);
      return wantarray? @$arr: $arr;
  }

=back

=head3 rowStatus() - Liefere/Setze Datensatzstatus

=head4 Synopsis

  $rowStatus = $row->rowStatus;
  $rowStatus = $row->rowStatus($rowStatus);

=head4 Description

Liefere/Setze den Status des Datensatzes. Der Status beschreibt
den Änderungsstand des Datensatzes hinsichtlich seiner Kolumnenwerte.

Folgende Status sind definiert:

=over 4

=item '0' (unverändert)

=back

Der Datensatz wurde von der Datenbank selektiert und nicht modifiziert.

=over 4

=item 'U' (modifiziert)

=back

Der Datensatz wurde von der Datenbank selektiert und durch eine der
Attributmethoden modifiziert.

=over 4

=item 'I' (neu)

=back

Der Datensatz wurde durch new() erzeugt. Er existiert auf der
Datenbank nicht.

=over 4

=item 'D' (zu löschen)

=back

Der Datensatz wurde zum Löschen markiert. Dies geschah durch Aufruf
von $row->rowStatus('D'). Mit dem nächsen Aufruf von $row->save($db);
wird die Löschoperation auf der Datenbank ausgeführt.

=head3 titles() - Liefere Kolumnentitel

=head4 Synopsis

  $titleA|@titles = $row->titles; # [1]
  $titleA|@titles = $class->titles($db); # [2]

=head4 Description

=over 4

=item 1.

Liefere die Liste der Kolumentitel des Datensatzes, entweder
als Referenz (Skalarkontext) oder als Array (Listkontext).

=item 2.

Liefere die Liste der Kolumnentitel der Datensatz-Klasse.

=back

=head3 isModified() - Prüfe, ob Kolumne modifiziert wurde

=head4 Synopsis

  $bool = $row->isModified($title);

=head4 Description

Liefere 1, wenn die Kolumnen $title modifiziert wurde, andernfalls 0.

=head3 modifiedColumns() - Liefere die Liste der geänderten Kolumnen

=head4 Synopsis

  @keys|$keyA = $row->modifiedColumns;
  @pairs|$pairA = $row->modifiedColumns(-withValue=>1);

=head4 Options

=over 4

=item -columns => @colSpec (Default: alle Kolumnen)

Einschränkung auf die angegebenen Kolumnen. Ist als Kolumnenname
eine Arrayreferenz

  [$key=>$retKey]

angegeben, wird Kolumne $key geprüft, aber $retKey als Kolumnenname
geliefert. Dies ist bei View-Datensätzen nützlich, wenn $row ein
View-Datensatz ist, aber ein Tabellen-Datensatz manipuliert
werden soll und die Kolumnennamen differieren.

=item -withValue => $bool (Default: 0)

Liefere nicht nur die Kolumnennamen, sondern auch deren Wert.
Die Methode liefert in dem Fall die Datensatz-Änderungen
als Schlüssel/Wert-Paare.

=back

=head4 Example

Generiere eine SET-Klausel für ein UPDATE-Statement aus einem
View-Datensatz, dessen Kolumnen teilweise anders beannt sind,
als die der zu aktualierenden Tabelle:

  @setClause = $row->modifiedColumns(
      -columns=>[
          lieferantid,
          [lieferantenartikelnr=>'liefernr'],
          [ekpreis=>'preis_ek'],
      ],
      -widthValues=>1,
  );

=head3 setClauseFromModifiedRow() - Liefere SET-Klausel über geänderten Kolumnen

=head4 Synopsis

  @clauses|$clauseA = $row->setClauseFromModifiedRow(@columns);

=head4 See Also

modifiedColumns()

=head4 Example

Auf einen View-Datensatz wurden Werte geschrieben. Wir wissen
nicht, welche Information sich geändert hat. Die Methode
setClauseFromModifiedRow() liefert uns die SET-Klausel für ein UPDATE:

  @setClause = $row->setClauseFromModifiedRow(
      [lieferantenid=>'lieferantid'],
      [lieferantenartikelnr=>'liefernr'],
      [ekpreis=>'preis_ek'],
      [lieferantenid1=>'lieferantid_1'],
      [lieferantenartikelnr1=>'liefernr_1'],
      [ekpreis1=>'preis_ek_1'],
      [lieferantenid2=>'lieferantid_2'],
      [lieferantenartikelnr2=>'liefernr_2'],
      [ekpreis2=>'preis_ek_2'],
  );
  $db->update('shopartikellieferanteninfo',
      @setClause,
      -where,artikelid => $artId,
  );

Wurde keine der Kolumnen geändert, liefert setClauseFromModifiedRow() eine leere
Liste und $db->update() ist eine Nulloperation.

=head3 absorbModifications() - Absorbiere Datensatz-Änderungen

=head4 Synopsis

  $row->absorbModifications;

=head4 Description

Setze den Datensatz-Status auf 0 (unverändert) und lösche den
Änderungs-Hash. Nach Aufruf der Methode sind alle vorangegangenen
Änderungen am Datensatz nicht mehr feststellbar.

Die Methode kann benutzt werden, um Datenkorrekturen, z.B. durch
normalizeNumber(), verschwinden zu lassen.

=head4 See Also

$tab->absorbModifications()

=head3 modificationInfo() - Liefere Information über Datensatz-Änderungen

=head4 Synopsis

  $str = $row->modificationInfo;

=head2 Eltern-Datensätze

=head3 parentExists() - Prüfe, ob Eltern-Datensatz existiert

=head4 Synopsis

  $row = $row->parentExists($type);

=head4 Description

Prüfe, ob ein Eltern-Datensätze vom Typ $type existiert.
Falls ja, liefere I<wahr>, andernfalls I<falsch>.

=head3 addParent() - Füge Eltern-Datensatz hinzu

=head4 Synopsis

  $row->addParent($type,$parentRow);

=head4 Description

Füge Datensatz $parentRow als Eltern-Datensatz vom Typ $type hinzu.
Die Referenz wird als schwache Referenz gekennzeichnet.

=head3 getParent() - Liefere Eltern-Datensatz

=head4 Synopsis

  $parentRow = $row->getParent($type);

=head4 Description

Liefere den Eltern-Datensatz vom Typ $type. Existiert keine
Elterndatensatz vom Typ $type, liefere undef.

=head2 Kind-Datensätze

=head3 childTypeExists() - Prüfe, ob Kind-Datensatz-Typ existiert

=head4 Synopsis

  $bool = $row->childTypeExists($type);

=head4 Description

Prüfe, ob Kind-Datensätze des Typs $type zum Datensatz hinzugefügt
werden können. Falls ja, liefere I<wahr>, andernfalls I<falsch>.

=head3 addChildType() - Füge Kind-Datensatz-Typ hinzu

=head4 Synopsis

  $tab = $row->addChildType($type,$rowClass,\@titles);

=head4 Description

Bevor Kind-Datensätze einem Datenstatz zugeordnet werden können, muss
ein entsprechendes ResultSet-Objekt hinzugefügt werden. Dieses wird
per $type angesprochen. Z.B. liefert

  $tab = $row->getChilds($type);

die Menge der zugeordenten Kind-Objekte vom Typ $type.

=head3 addChild() - Füge Kind-Datensatz hinzu

=head4 Synopsis

  $row->addChild($type,$childRow);

=head4 Description

Füge Datensatz $childRow als Kinddatensatz vom Typ $type hinzu.

=head3 getChilds() - Liefere Kind-Datensätze

=head4 Synopsis

  @rows|$rowT = $row->getChilds($type);

=head4 Description

Liefere die Kind-Datensätze vom Typ $type.

=head2 Subklassen-Methoden

Die folgenden Methoden implementieren die abstrakten Methoden der
Basisklasse Quiq::Database::Row. Die Methoden hat die Klasse mit
der Klasse Quiq::Database::Row::Array gemeinsam.

=head3 asArray() - Liefere Datensatz als Array

=head4 Synopsis

  $arr|@arr = $row->asArray;

=head4 Description

Liefere den Datensatz als Array, entweder in Form einer Referenz
(Skalarkontext) oder als Array von Werten (Listkontext).

=head3 asString() - Liefere Datensatz als Zeichenkette

=head4 Synopsis

  $str = $row->asString;
  $str = $row->asString($colSep);

=head4 Description

Liefere den Datensatz als Zeichenkette. Per Default werden die Kolumnen
per TAB getrennt. Der Trenner kann mittels $colSep explizit angegeben
werden.

=head3 copy() - Kopiere Datensatz

=head4 Synopsis

  $newRow = $row->copy;

=head4 Description

Erstelle eine Kopie des Datensatzes $row und liefere eine Referenz
auf die Kopie zurück.

Die Kopie ist identisch zum Original, bis darauf, dass der
Daten-Hash und der Änderungs-Hash kopiert werden:

  Daten-Hash.........................: kopiert
  Referenz auf Titel-Liste...........: identisch
  Datensatz-Status...................: identisch
  Änderungs-Hash.....................: kopiert
  Referenz auf Kind-Datensätze-Hash..: identisch
  Referenz auf Eltern-Datensätze-Hash: identisch

=head3 isRaw() - Liefere, ob Klasse Raw-Datensätze repräsentiert

=head4 Synopsis

  $bool = $row->isRaw;

=head2 Sonstiges

=head3 asRecord() - Liefere Datensatz in Record-Darstellung

=head4 Synopsis

  $str = $row->asRecord(@opt);

=head4 Options

=over 4

=item -color => $a

AnsiColor-Objekt.

=item -indent => $n (Default: 4)

Tiefe der Einrückung der Werte.

=item -null => $str (Default: 'NULL')

Gibt an, welcher Wert für einen Nullwert ausgegeben wird. Ist -null undef,
wird das Attribut nicht ausgegeben (weder Name noch Wert).
Ist $null ein Leerstring (''), wird nur der Wert nicht ausgegeben.

=back

=head4 Description

Liefere den Datensatz in mehrzeiliger Record-Darstellung.
Die Darstellung hat den Aufbau:

  <key1>:
      <val1>
  <key2>:
      <val2>
  ...

=head3 copyData() - Kopiere Attributwerte von Datensatz zu Datensatz

=head4 Synopsis

  $row->copyData($row0,@opt);

=head4 Options

=over 4

=item -ignore => \@keys (Default: [])

Übergehe die Attribute @keys, d.h. kopiere die Werte dieser
Attribute nicht.

=item -dontCopyNull => $bool (Default: 0)

Kopiere keine Nullwerte, d.h. im Falle eines Nullwerts in
Datensatz $row0 bleibt der Attributwert in $row erhalten.
Mögliche Erweiterung: Liste von Kolumnennamen.

=back

=head4 Description

Setze die Datensatz-Attribute in $row auf deren Werte in $row0.
Attribute, die in $row0 nicht vorkommen, werden nicht gesetzt.
Die Methode liefert keinen Wert zurück.

Die Methode ist nützlich, wenn ein Datensatz auf der Datenbank
aktualisiert werden soll und dessen neue Werte auf einem anderen
Datensatz stehen.

=head3 save() - Aktualisiere Datensatz auf Datenbank

=head4 Synopsis

  $cur = $row->save($db);

=head4 Description

Aktualisiert den Datensatz $row gemäß seines Status auf der Datenbank
$db und liefere das Resultat der Statement-Ausführung zurück.

Welche Datenbankoperation konkret ausgeführt wird, ergibt sich aus
dem Status des Datensatzes.

B<Statuswerte>

=over 4

=item '0' (unverändert)

Es wird keine Datenbankoperation ausgeführt.

=item 'U' (modifiziert)

Es wird eine Update-Operation auf der Datenbank ausgeführt, d.h. es
wird die Methode $row->update() gerufen.

=item 'I' (neu)

Es wird eine Insert-Operation auf der Datenbank ausgeführt, d.h. es
wird die Methode $row->insert() gerufen.

=back

['D' (zu löschen)]

  Es wird eine Delete-Operation auf der Datenbank ausgeführt, d.h. es
  wird die Methode $row->delete() gerufen.

=head3 weaken() - Erzeuge schwache Referenz

=head4 Synopsis

  $ref = $row->weaken($key);
  $ref = $row->weaken($key=>$ref);

=head4 Description

Mache die Referenz von Schlüssel $key zu einer schwachen Referenz
und liefere sie zurück. Ist eine Referenz $ref als Parameter angegeben,
setze die Referenz zuvor.

=head2 DML Statements

=head3 select() - Liefere Datensätze der Klasse

=head4 Synopsis

  $tab|@rows|$cur = $class->select($db,@select,@opt);

=head4 Options

=over 4

=item -cursor => $bool (Default: 0)

Liefere Cursor statt Liste der Datensätze.

=item -tableClass => $tableClass (Default: undef)

Name der Klasse, die die Ergebnismenge speichert.

=back

=head3 lookup() - Liefere Datensatz der Klasse

=head4 Synopsis

  $row|@vals = $class->lookup($db,@select,@opt);

=head4 Options

=over 4

=item -sloppy => $bool (default: 0)

Wirf keine Exception, wenn der Datensatz nicht existiert, sondern
undef (Skalarkontext) bzw. eine leere Liste (Listkontext).

=back

=head3 value() - Liefere Kolumnenwert

=head4 Synopsis

  $val = $class->value($db,@select,@opt);

=head4 Options

Siehe $db->value().

=head2 Kompatibilität

=head3 toSbit() - Generiere Sbit-Datensatz

=head4 Synopsis

  $sbitRow = $row->toSbit($sbitClass);

=head4 Arguments

=over 4

=item $sbitClass

Datensatz-Klasse der Sbit-Klassenbibliothek

=back

=head4 Returns

Referenz auf Sbit-Datensatz

=head4 Description

Generiere aus Datensatz I<$row> einen Sbit-Datensatz der Klasse
I<$sbitClass> und liefere diesen zurück.

=head4 Details

Die Methode ist nützlich, wenn über die Klassenbibliothek
selektiert, aber die weitere Verarbeitung über Klassen auf
Basis der Sbit-Klassenbibliothek erfolgt.

=head2 Autoload

=head3 AUTOLOAD() - Generiere Attributmethode

=head4 Synopsis

  $val = $row->AUTOLOAD;
  $val = $row->AUTOLOAD($val);

=head4 Description

Generiere Attributmethode, rufe diese auf und liefere den Attributwert.

=head1 VERSION

1.224

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Database/Row/Object.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2025 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
