=encoding utf8

=head1 NAME

Quiq::Record - Verarbeitung von Text-Records

=head1 BASE CLASS

L<Quiq::Object|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Object.pod>

=head1 DESCRIPTION

Ein Text-Record ist eine Folge von Schlüssel/Wert-Paaren
in Textform, wobei

=over 2

=item *

ein Schlüssel eine Folge von alphanumerischen Zeichen oder
Unterstrich ('_') oder Bindestrich ('-') ist, und

=item *

ein Wert ein beliebiger einzeiliger oder mehrzeiliger Text ist.

=back

Stringrepräsentation:

  Schlüssel1:
      Wert1
  Schlüssel2:
      Wert2
  ...

oder

  Schlüssel1: Wert1
  Schlüssel2: Wert2
  ...

oder ein Mischung aus beidem oder

  @@Schlüssel@@
  Wert1
  @@Schlüsse2@@
  Wert2

Um die dritte Repräsentation (mit @@Schlüssel@@) zu erzeugen, muss
als Option -format => '@' angegeben werden.

=head1 METHODS

=head2 Klassenmethoden

=head3 fromString() - Lies Schlüssel/Wert-Paare aus String

=head4 Synopsis

  @keyVal | $keyValA = $class->fromString($str);
  @keyVal | $keyValA = $class->fromString(\$str);

=head4 Description

Lies Text-Record aus Zeichenkette $str, zerlege ihn in
Schlüssel/Wert-Paare und liefere die Liste der
Schlüssel/Wert-Paare zurück. Im Skalarkontext liefere eine
Referenz auf die Liste.

=over 2

=item *

NEWLINEs am Anfang und am Ende eines Werts werden entfernt.

=item *

Eine Einrückung innerhalb eines mehrzeiligen Werts wird entfernt.
Eine Einrückung ist die längste Folge von Leerzeichen oder Tabs, die
allen Zeilen eines mehrzeiligen Werts gemeinsam ist.

=back

=head3 fromFile() - Lies Schlüssel/Wert-Paare aus Datei

=head4 Synopsis

  @keyVal | $keyValA = $class->fromFile($file,@opt);

=head4 Arguments

=over 4

=item $file

Datei, die den Record enthält.

=back

=head4 Options

=over 4

=item -encoding => $encoding

Character Encoding, z.B. 'UTF-8'.

=back

=head4 Description

Wie L<fromString|"fromString() - Lies Schlüssel/Wert-Paare aus String">, nur dass der Record aus Datei $file gelesen wird.

=head3 toString() - Schreibe Schlüssel/Wert-Paare auf String

=head4 Synopsis

  $str = $class->toString(@keyVal,@opt);
  $str = $class->toString(\@keyVal,@opt);

=head4 Options

=over 4

=item --format => ':'|'@' (Default: ':')

Im Falle von ':' erzeuge das Format:

  <KEY>:
      <VAL>

Im Falle von '@' erzeuge das Format:

  @@<KEY>@@
  <VAL>

=item -indent => $n (Default: 4)

Tiefe der Einrückung.

=item -ignoreNull => $bool (Default: 0)

Ignoriere Schlüssel/Wert-Paare, bei denen der Wert null ist.

=item -space => $n (Default: 0)

Anzahl Leerzeilen zwischen den Einträgen.

=item -strip => $bool (Default: 1)

Entferne Leerzeilen am Anfang und Whitespace am Ende des Werts.

=back

=head4 Description

Generiere für die Schlüssel/Wert-Paare @keyVal eine Text-Record
Repräsentation und liefere diese zurück.

=head3 toFile() - Schreibe Schlüssel/Wert-Paare auf Datei

=head4 Synopsis

  $class->toFile($file,@keyVal,@opt);
  $class->toFile($file,\@keyVal,@opt);

=head4 Options

Siehe L<toString|"toString() - Schreibe Schlüssel/Wert-Paare auf String">

=head4 Description

Wie L<toString|"toString() - Schreibe Schlüssel/Wert-Paare auf String">, nur dass der Record auf eine Datei geschrieben wird.
Die Methode liefert keinen Wert zurück.

=head1 VERSION

1.160

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Record.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2019 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
